# https://www.acmicpc.net/problem/2565

'''
두 전봇대 A와 B 사이에 하나 둘씩 전깃줄을 추가하다 보니 전깃줄이 서로 교차하는 경우가 발생하였다. 
합선의 위험이 있어 이들 중 몇 개의 전깃줄을 없애 전깃줄이 교차하지 않도록 만들려고 한다.

전깃줄이 전봇대에 연결되는 위치는 전봇대 위에서부터 차례대로 번호가 매겨진다. 
전깃줄의 개수와 전깃줄들이 두 전봇대에 연결되는 위치의 번호가 주어질 때, 
남아있는 모든 전깃줄이 서로 교차하지 않게 하기 위해 없애야 하는 전깃줄의 최소 개수를 구하는 프로그램을 작성하시오.

첫째 줄에는 두 전봇대 사이의 전깃줄의 개수가 주어진다. 전깃줄의 개수는 100 이하의 자연수이다. 
둘째 줄부터 한 줄에 하나씩 전깃줄이 A전봇대와 연결되는 위치의 번호와 B전봇대와 연결되는 위치의 번호가 차례로 주어진다. 
위치의 번호는 500 이하의 자연수이고, 같은 위치에 두 개 이상의 전깃줄이 연결될 수 없다.

첫째 줄에 남아있는 모든 전깃줄이 서로 교차하지 않게 하기 위해 없애야 하는 전깃줄의 최소 개수를 출력한다.

LIS의 개념을 이용
1. 입력받은 선을 A의 전봇대 기준으로 오름차순 정렬
2. B 전봇대를 기준으로 LIS를 사용
2-1. A 전봇대가 오름차순이면, B 전봇대도 오름차순을 따라가야 겹치지 않음
3. N - max(dp)
'''

import sys
input =  sys.stdin.readline

wires = []
N = int(input())
for _ in range(N):
    wires.append(tuple(map(int, input().split())))
wires.sort()

# N = 8
# wires = [
#     (1, 8),
#     (3, 9),
#     (2, 2),
#     (4, 1),
#     (6, 4),
#     (10, 10),
#     (9, 7),
#     (7, 6),
# ]
# wires.sort()

dp = [1] * N

for i in range(N):
    for j in range(i):
        if wires[i][1] > wires[j][1]:
            dp[i] = max(dp[j]+1, dp[i])

print(N-max(dp))